# This workflow is a reusable one called by other workflows
name: (Template) E2E Tests workflow
on:
  workflow_call:
  # Variables to set when calling this reusable workflow
    inputs:
      hosted_provider:
        description: Provider to run tests(eks/aks/gke)
        required: true
        type: string
      rancher_version:
        description: Rancher version to deploy
        required: true
        type: string
      k3s_version:
        description: k3s version of local cluster
        required: true
        type: string
      operator_nightly_chart:
        description: Install hosted-provider nightly chart
        required: true
        type: boolean
      rancher_installed:
        description: Rancher details if already installed
        type: string
      tests_to_run:
        required: true
        type: string
      destroy_runner:
        description: Destroy the auto-generated self-hosted runner
        type: boolean
      runner_template:
        description: Runner template to use
        required: true
        type: string
      downstream_cluster_cleanup:
        description: Cleanup downstream clusters after test
        type: boolean
      proxy:
        description: Install Rancher behind proxy
        type: boolean
      backup_operator_version:
        description: Backup Restore operator version
        type: string
      qase_run_id:
        description: Qase run ID to use for reporting
        type: string
      rancher_upgrade_version:
        description: Rancher upgrade version
        type: string
      k8s_upgrade_minor_version:
        description: K8s minor version to test
        type: string

env:
  AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
  AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
  AWS_KMS_KEY: ${{secrets.AWS_KMS_KEY}}
  EKS_REGION: ${{ secrets.EKS_REGION }}
  GCP_CREDENTIALS: ${{ secrets.GOOGLE_APPLICATION_CREDENTIALS }}
  AKS_CLIENT_ID: ${{ secrets.AKS_CLIENT_ID }}
  AKS_CLIENT_SECRET: ${{ secrets.AKS_CLIENT_SECRET }}
  AKS_SUBSCRIPTION_ID: ${{ secrets.AKS_SUBSCRIPTION_ID }}
  AKS_TENANT_ID: ${{ secrets.AKS_TENANT_ID }}
  AKS_VNET: ${{ secrets.AKS_VNET }}
  AKS_VNET_RG: ${{ secrets.AKS_VNET_RG }}
  GKE_PROJECT_ID: ${{ secrets.GKE_PROJECT_ID }}
  PROVIDER: ${{ inputs.hosted_provider }}
  RANCHER_PASSWORD: ${{ secrets.RANCHER_PASSWORD }}
  QASE_API_TOKEN: ${{ secrets.QASE_API_TOKEN }}
  QASE_PROJECT_CODE: HP
  QASE_REPORT: 1
  QASE_RUN_COMPLETE: 1
  RANCHER_LOG_COLLECTOR: ${{ github.workspace }}/.github/scripts/collect-rancher-logs.sh
  GCP_RUNNER_ZONE: asia-south2-c
  DOWNSTREAM_CLUSTER_CLEANUP: ${{ inputs.downstream_cluster_cleanup }}
  QASE_HELPER: ${{ github.workspace }}/hosted/helpers/qase/helper_qase.go
  SECONDARY_GCP_CREDENTIALS: ${{ secrets.SECONDARY_GOOGLE_APPLICATION_CREDENTIALS }}
jobs:
  create-runner:
    runs-on: ubuntu-latest
    outputs:
      uuid: ${{ steps.generator.outputs.uuid }}
      runner: ${{ steps.generator.outputs.runner }}
    steps:
      # actions/checkout MUST come before auth
      - name: Checkout
        uses: actions/checkout@v4
      - name: Generate UUID and Runner hostname
        id: generator
        run: |
          UUID=$(uuidgen)
          GH_REPO_FULL=${{ github.repository }}
          GH_REPO=${GH_REPO_FULL#*/}
          echo "uuid=${UUID//-}" >> ${GITHUB_OUTPUT}
          echo "runner=${GH_REPO//\//-}-ci-${UUID//-}" >> ${GITHUB_OUTPUT}
      - name: Authenticate to GCP
        uses: google-github-actions/auth@v2
        with:
          credentials_json: ${{ secrets.GOOGLE_APPLICATION_CREDENTIALS }}
      - name: Setup gcloud
        uses: google-github-actions/setup-gcloud@v2
      - name: Create runner
        run: |
          REGION=$(echo ${{ env.GCP_RUNNER_ZONE }} | sed 's/-[abcdef]$//')
          gcloud compute instances create ${{ steps.generator.outputs.runner }} \
            --zone ${{ env.GCP_RUNNER_ZONE }} \
            --source-instance-template projects/${{ env.GKE_PROJECT_ID }}/regions/${REGION}/instanceTemplates/${{ inputs.runner_template }}
      - name: Allow traffic
        run: |
          gcloud compute instances add-tags ${{ steps.generator.outputs.runner }} \
            --tags http-server,https-server --zone ${{ env.GCP_RUNNER_ZONE }}
      - name: Create GCP secrets
        run: |
          echo -n ${{ secrets.PAT_TOKEN }} \
            | gcloud secrets create PAT_TOKEN_${{ steps.generator.outputs.uuid }} --ttl="36000s" --quiet --data-file=-
          echo -n ${{ github.repository }} \
            | gcloud secrets create GH_REPO_${{ steps.generator.outputs.uuid }} --ttl="36000s" --quiet --data-file=-

  installation-and-e2e-tests:
    runs-on: ${{ needs.create-runner.outputs.uuid }}
    needs: create-runner
    env:
      # For some reason the go doesn't link by default against system libresolv library
      CGO_LDFLAGS: -O2 -g -lresolv
    outputs:
      PUBLIC_IP: ${{ steps.runner-ip.outputs.PUBLIC_IP }}
    steps:
      - name: Add /usr/local/bin into PATH
        run: |
          echo "/usr/local/bin/" >> ${GITHUB_PATH}
          echo 'Defaults secure_path="/usr/sbin:/usr/bin:/sbin:/bin:/usr/local/bin"' | sudo tee /etc/sudoers.d/0-custom_secure_path

      - name: Checkout
        uses: actions/checkout@v4

      - name: Authenticate to GCP
        uses: google-github-actions/auth@v2
        with:
          credentials_json: ${{ secrets.GOOGLE_APPLICATION_CREDENTIALS }}
      - name: Setup gcloud
        uses: google-github-actions/setup-gcloud@v2

      - name: Get Runner IP
        id: runner-ip
        run: |
          echo "PUBLIC_IP=$(gcloud compute instances describe ${{ needs.create-runner.outputs.runner }} \
            --format='get(networkInterfaces[0].accessConfigs[0].natIP)' --zone ${{ env.GCP_RUNNER_ZONE }})" >> "$GITHUB_OUTPUT"

      - name: Set Rancher hostname / password
        run: |
          if [ ${{ inputs.rancher_installed }} != 'hostname/password' ]; then
            echo RANCHER_HOSTNAME="$(echo ${{ inputs.rancher_installed }} | cut -d'/' -f1)" >> ${GITHUB_ENV}
            echo RANCHER_PASSWORD="$(echo ${{ inputs.rancher_installed }} | cut -d'/' -f2)" >> ${GITHUB_ENV}
          else
            echo RANCHER_HOSTNAME=${{ steps.runner-ip.outputs.PUBLIC_IP }}.sslip.io >> $GITHUB_ENV
            echo RANCHER_PASSWORD=${{ secrets.RANCHER_PASSWORD }} >> $GITHUB_ENV
          fi

      - name: Install Proxy
        if: ${{ inputs.rancher_installed == 'hostname/password' && inputs.proxy == true }}
        run: |
          echo "PROXY_HOST=$(gcloud compute instances describe ${{ needs.create-runner.outputs.runner }} \
            --format='get(networkInterfaces[0].networkIP)' --zone ${{ env.GCP_RUNNER_ZONE }}):3128" >> ${GITHUB_ENV}
          echo "RANCHER_BEHIND_PROXY=enabled" >> ${GITHUB_ENV}


      - name: Install Go
        uses: actions/setup-go@v5
        env:
          GOTOOLCHAIN: local
        with:
          go-version-file: go.mod

      - name: Create/Export Qase Run
        id: qase
        env:
          QASE_RUN_NAME: ${{ github.event_name == 'workflow_dispatch' && inputs.rancher_version || github.workflow }}
        run: |
          case ${{ inputs.qase_run_id }} in
            'auto')
              # Define and export URL of GH test run in Qase run description
              GH_RUN_URL="${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}"
              export QASE_RUN_DESCRIPTION="${GH_RUN_URL}"
              # Use full rancher version
              QASE_RUN_NAME=$(echo $QASE_RUN_NAME | grep -P '[0-9]+\.[0-9]+\.[0-9]+(-[a-z]+[0-9]+)?' || true)
              # Or workflow name if the full rancher version is not found
              if [ -z "$QASE_RUN_NAME" ]; then
                QASE_RUN_NAME="${{ github.workflow }}"
              fi
              # Create a Qase run, get its ID
              ID=$(go run ${{ env.QASE_HELPER }} -create)
              # Export outputs for future use
              echo "qase_run_description=${QASE_RUN_DESCRIPTION}" >> ${GITHUB_OUTPUT}
              echo "qase_run_id=${ID}" >> ${GITHUB_OUTPUT}
              echo "qase_run_name=${QASE_RUN_NAME}" >> ${GITHUB_OUTPUT}
              # Just an info for debugging purposes
              echo -e "Exported values:\nQASE_RUN_ID=${ID}\nQASE_RUN_DESCRIPTION=${QASE_RUN_DESCRIPTION}\nQASE_RUN_NAME=${QASE_RUN_NAME}"
              ;;
            'none')
              echo "qase_run_id=" >> ${GITHUB_OUTPUT}
              echo "### Test not reported in QASE!" >> ${GITHUB_STEP_SUMMARY}
              unset QASE_REPORT
              unset QASE_API_TOKEN
              ;;
            [0-9]*)
              # If the run ID has been specified
              echo "qase_run_id=${{ inputs.qase_run_id }}" >> ${GITHUB_OUTPUT}
              ;;
          esac

      - name: Install k3s / Helm / CertManager / Rancher
        id: prepare-rancher
        if: ${{ inputs.rancher_installed == 'hostname/password' }}
        env:
          KUBECONFIG: /etc/rancher/k3s/k3s.yaml
          INSTALL_K3S_VERSION: ${{ inputs.k3s_version }}
          RANCHER_VERSION: ${{ inputs.rancher_version }}
          RANCHER_HOSTNAME: ${{ env.RANCHER_HOSTNAME }}
          RANCHER_PASSWORD: ${{ env.RANCHER_PASSWORD }}
          PROXY_HOST: ${{ env.PROXY_HOST }}
          RANCHER_BEHIND_PROXY: ${{ env.RANCHER_BEHIND_PROXY }}
          SKIP_RANCHER_INSTALL: ${{ startsWith(inputs.tests_to_run, 'k8s_chart_support_upgrade') == true}}
        run: |
          if [ ${{ inputs.operator_nightly_chart }} == true ]; then
            export NIGHTLY_CHART="enabled"
          fi
          make prepare-rancher
            
      - name: Login to Azure
        uses: azure/login@v2.2.0
        with:
          creds: '{"clientId":"${{ env.AKS_CLIENT_ID }}","clientSecret":"${{ env.AKS_CLIENT_SECRET }}","subscriptionId":"${{ env.AKS_SUBSCRIPTION_ID }}","tenantId":"${{ env.AKS_TENANT_ID }}"}'

      - name: Install EKSCTL
        run: |
          # Better to always use the latest eksctl binary to avoid API version issue
          EKSCTL_GH=https://github.com/weaveworks/eksctl/releases/latest/download
          curl --location ${EKSCTL_GH}/eksctl_$(uname -s)_amd64.tar.gz | tar xz -C .
          chmod +x eksctl
          sudo mv eksctl /usr/local/bin
            
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4.0.2
        with:
          aws-access-key-id: ${{ env.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ env.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.EKS_REGION }}

      - name: Install AWS CLI v2 (if running sync tests)
        if: ${{!cancelled() && inputs.hosted_provider == 'eks' && contains(inputs.tests_to_run, 'sync_')}}
        run:  |
          curl "https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip" -o "awscliv2.zip"
          unzip awscliv2.zip
          sudo ./aws/install
          rm -rf awscliv2.zip aws/

      - name: Provisioning cluster tests
        if: ${{ !cancelled() && steps.prepare-rancher.outcome != 'failure' && contains(inputs.tests_to_run, 'p0_provisioning') }}
        env:
          RANCHER_HOSTNAME: ${{ env.RANCHER_HOSTNAME }}
          RANCHER_PASSWORD: ${{ env.RANCHER_PASSWORD }}
          CATTLE_TEST_CONFIG: ${{ github.workspace }}/cattle-config-provisioning.yaml
          QASE_RUN_ID: ${{ steps.qase.outputs.qase_run_id }}
        run: |
          make e2e-provisioning-tests

      - name: Import cluster tests
        if: ${{ !cancelled() && steps.prepare-rancher.outcome != 'failure' && contains(inputs.tests_to_run, 'p0_import') }}
        env:
          RANCHER_HOSTNAME: ${{ env.RANCHER_HOSTNAME }}
          RANCHER_PASSWORD: ${{ env.RANCHER_PASSWORD }}
          CATTLE_TEST_CONFIG: ${{ github.workspace }}/cattle-config-import.yaml
          QASE_RUN_ID: ${{ steps.qase.outputs.qase_run_id }}
        run: |
          make e2e-import-tests

      - name: Provisioning cluster P1 tests
        if:  ${{ !cancelled() && steps.prepare-rancher.outcome != 'failure' && contains(inputs.tests_to_run, 'p1_provisioning') }}
        env:
          RANCHER_HOSTNAME: ${{ env.RANCHER_HOSTNAME }}
          RANCHER_PASSWORD: ${{ env.RANCHER_PASSWORD }}
          CATTLE_TEST_CONFIG: ${{ github.workspace }}/cattle-config-provisioning.yaml
          QASE_RUN_ID: ${{ steps.qase.outputs.qase_run_id }}
        run: |
          make e2e-p1-provisioning-tests

      - name: Import cluster P1 tests
        if: ${{ !cancelled() && steps.prepare-rancher.outcome != 'failure' && contains(inputs.tests_to_run, 'p1_import') }}
        env:
          RANCHER_HOSTNAME: ${{ env.RANCHER_HOSTNAME }}
          RANCHER_PASSWORD: ${{ env.RANCHER_PASSWORD }}
          CATTLE_TEST_CONFIG: ${{ github.workspace }}/cattle-config-import.yaml
          QASE_RUN_ID: ${{ steps.qase.outputs.qase_run_id }}
        run: |
          make e2e-p1-import-tests

      - name: Support matrix provisioning tests
        if: ${{ !cancelled() && steps.prepare-rancher.outcome != 'failure' && contains(inputs.tests_to_run, 'support_matrix_provisioning') }}
        env:
          RANCHER_HOSTNAME: ${{ env.RANCHER_HOSTNAME }}
          RANCHER_PASSWORD: ${{ env.RANCHER_PASSWORD }}
          CATTLE_TEST_CONFIG: ${{ github.workspace }}/cattle-config-provisioning.yaml
          QASE_RUN_ID: ${{ steps.qase.outputs.qase_run_id }}
        run: |
          make e2e-support-matrix-provisioning-tests

      - name: Support matrix import tests
        if: ${{ !cancelled() && steps.prepare-rancher.outcome != 'failure' && contains(inputs.tests_to_run, 'support_matrix_import') }}
        env:
          RANCHER_HOSTNAME: ${{ env.RANCHER_HOSTNAME }}
          RANCHER_PASSWORD: ${{ env.RANCHER_PASSWORD }}
          CATTLE_TEST_CONFIG: ${{ github.workspace }}/cattle-config-import.yaml
          QASE_RUN_ID: ${{ steps.qase.outputs.qase_run_id }}
        run: |
          make e2e-support-matrix-import-tests

      - name: K8s Chart Support provisioning tests
        if: ${{ !cancelled() && steps.prepare-rancher.outcome != 'failure' && contains(inputs.tests_to_run, 'k8s_chart_support_provisioning') }}
        env:
          RANCHER_HOSTNAME: ${{ env.RANCHER_HOSTNAME }}
          RANCHER_PASSWORD: ${{ env.RANCHER_PASSWORD }}
          CATTLE_TEST_CONFIG: ${{ github.workspace }}/cattle-config-provisioning.yaml
          QASE_RUN_ID: ${{ steps.qase.outputs.qase_run_id }}
          KUBECONFIG: /etc/rancher/k3s/k3s.yaml
        run: |
          make e2e-k8s-chart-support-provisioning-tests

      - name: K8s Chart Support import tests
        if: ${{ !cancelled() && steps.prepare-rancher.outcome != 'failure' && contains(inputs.tests_to_run, 'k8s_chart_support_import') }}
        env:
          RANCHER_HOSTNAME: ${{ env.RANCHER_HOSTNAME }}
          RANCHER_PASSWORD: ${{ env.RANCHER_PASSWORD }}
          CATTLE_TEST_CONFIG: ${{ github.workspace }}/cattle-config-import.yaml
          QASE_RUN_ID: ${{ steps.qase.outputs.qase_run_id }}
          KUBECONFIG: /etc/rancher/k3s/k3s.yaml
        run: |
          make e2e-k8s-chart-support-import-tests

      - name: Sync provisioning tests
        if: ${{ !cancelled() && steps.prepare-rancher.outcome != 'failure' && contains(inputs.tests_to_run, 'sync_provisioning') }}
        env:
          RANCHER_HOSTNAME: ${{ env.RANCHER_HOSTNAME }}
          RANCHER_PASSWORD: ${{ env.RANCHER_PASSWORD }}
          CATTLE_TEST_CONFIG: ${{ github.workspace }}/cattle-config-provisioning.yaml
          QASE_RUN_ID: ${{ steps.qase.outputs.qase_run_id }}
        run: |
          make e2e-sync-provisioning-tests

      - name: Sync import tests
        if: ${{ !cancelled() && steps.prepare-rancher.outcome != 'failure' && contains(inputs.tests_to_run, 'sync_import') }}
        env:
          RANCHER_HOSTNAME: ${{ env.RANCHER_HOSTNAME }}
          RANCHER_PASSWORD: ${{ env.RANCHER_PASSWORD }}
          CATTLE_TEST_CONFIG: ${{ github.workspace }}/cattle-config-import.yaml
          QASE_RUN_ID: ${{ steps.qase.outputs.qase_run_id }}
        run: |
          make e2e-sync-import-tests

      - name: Backup/Restore provisioning tests
        if: ${{ !cancelled() && steps.prepare-rancher.outcome != 'failure' && contains(inputs.tests_to_run, 'backup_restore_provisioning') }}
        env:
          RANCHER_HOSTNAME: ${{ env.RANCHER_HOSTNAME }}
          RANCHER_PASSWORD: ${{ env.RANCHER_PASSWORD }}
          RANCHER_VERSION: ${{ inputs.rancher_version }}
          BACKUP_OPERATOR_VERSION: ${{ inputs.backup_operator_version }}
          CATTLE_TEST_CONFIG: ${{ github.workspace }}/cattle-config-provisioning.yaml
          QASE_RUN_ID: ${{ steps.qase.outputs.qase_run_id }}
          KUBECONFIG: /etc/rancher/k3s/k3s.yaml
        run: |
          make e2e-backup-restore-provisioning-tests

      - name: Backup/Restore import tests
        if: ${{ !cancelled() && steps.prepare-rancher.outcome != 'failure' && contains(inputs.tests_to_run, 'backup_restore_import') }}
        env:
          RANCHER_HOSTNAME: ${{ env.RANCHER_HOSTNAME }}
          RANCHER_PASSWORD: ${{ env.RANCHER_PASSWORD }}
          RANCHER_VERSION: ${{ inputs.rancher_version }}
          BACKUP_OPERATOR_VERSION: ${{ inputs.backup_operator_version }}
          CATTLE_TEST_CONFIG: ${{ github.workspace }}/cattle-config-import.yaml
          QASE_RUN_ID: ${{ steps.qase.outputs.qase_run_id }}
          KUBECONFIG: /etc/rancher/k3s/k3s.yaml
        run: |
          make e2e-backup-restore-import-tests

      - name: K8s Chart Support Upgrade provisioning tests
        if: ${{ !cancelled() && steps.prepare-rancher.outcome != 'failure' && contains(inputs.tests_to_run, 'k8s_chart_support_upgrade_provisioning') }}
        env:
          RANCHER_HOSTNAME: ${{ env.RANCHER_HOSTNAME }}
          RANCHER_PASSWORD: ${{ env.RANCHER_PASSWORD }}
          CATTLE_TEST_CONFIG: ${{ github.workspace }}/cattle-config-provisioning.yaml
          QASE_RUN_ID: ${{ steps.qase.outputs.qase_run_id }}
          KUBECONFIG: /etc/rancher/k3s/k3s.yaml
          RANCHER_VERSION: ${{ inputs.rancher_version }}
          RANCHER_UPGRADE_VERSION: ${{ inputs.rancher_upgrade_version }}
          K8S_UPGRADE_MINOR_VERSION: ${{ inputs.k8s_upgrade_minor_version }}
        run: |
          make e2e-k8s-chart-support-provisioning-tests-upgrade

      - name: K8s Chart Support Upgrade import tests
        if: ${{ !cancelled() && steps.prepare-rancher.outcome != 'failure' && contains(inputs.tests_to_run, 'k8s_chart_support_upgrade_import') }}
        env:
          RANCHER_HOSTNAME: ${{ env.RANCHER_HOSTNAME }}
          RANCHER_PASSWORD: ${{ env.RANCHER_PASSWORD }}
          CATTLE_TEST_CONFIG: ${{ github.workspace }}/cattle-config-import.yaml
          QASE_RUN_ID: ${{ steps.qase.outputs.qase_run_id }}
          KUBECONFIG: /etc/rancher/k3s/k3s.yaml
          RANCHER_VERSION: ${{ inputs.rancher_version }}
          RANCHER_UPGRADE_VERSION: ${{ inputs.rancher_upgrade_version }}
          K8S_UPGRADE_MINOR_VERSION: ${{ inputs.k8s_upgrade_minor_version }}
        run: |
          make e2e-k8s-chart-support-import-tests-upgrade

      - name: Finalize Qase Run and publish Results
        env:
          QASE_RUN_ID: ${{ steps.qase.outputs.qase_run_id }}
        if: ${{ !cancelled() && steps.qase.outcome == 'success' }}
        run: |
          REPORT=$(go run ${{ env.QASE_HELPER }} -publish)
          echo "${REPORT}"

          # Extract report URL and put it in summary
          REPORT_URL=$(awk '/available:/ { print $NF }' <<<${REPORT})
          if [[ -n "${REPORT_URL}" ]]; then
            echo "## QASE Reporting" >> ${GITHUB_STEP_SUMMARY}
            echo "Public Qase report: ${REPORT_URL}" >> ${GITHUB_STEP_SUMMARY}
          fi
  
      - name: Delete Qase Run if job cancelled or not using existing id
        env:
          QASE_RUN_ID: ${{ steps.qase.outputs.qase_run_id }}
        if: ${{ cancelled() && steps.qase.outcome == 'success' && inputs.qase_run_id == 'auto' }}
        run: |
          go run ${{ env.QASE_HELPER }} -delete

      - name: Collect logs
        env:
          KUBECONFIG: /etc/rancher/k3s/k3s.yaml
          RANCHER_BEHIND_PROXY: ${{ inputs.proxy == true }}
        if: ${{ always() && steps.prepare-rancher.outcome == 'success' }}
        run: |
          chmod +x ${{ env.RANCHER_LOG_COLLECTOR }}
          bash ${{ env.RANCHER_LOG_COLLECTOR }}

      - name: Upload cluster logs
        if: ${{ always() && steps.prepare-rancher.outcome == 'success' }}
        uses: actions/upload-artifact@v4
        with:
          name: support-logs-${{ inputs.hosted_provider }}
          path: ${{ github.workspace }}/logs/*
          if-no-files-found: ignore

      - name: Add summary
        env:
          KUBECONFIG: /etc/rancher/k3s/k3s.yaml
        if: ${{ always() && steps.prepare-rancher.outcome == 'success' }}
        run: |
          # Add summary
          echo "## General information" >> ${GITHUB_STEP_SUMMARY}
          echo "Rancher Manager Version: ${{ inputs.rancher_version }}" >> ${GITHUB_STEP_SUMMARY}
          echo "K3s on Rancher Manager: ${{ inputs.k3s_version }}" >> ${GITHUB_STEP_SUMMARY}
          echo "Tests run: ${{ inputs.tests_to_run }}" >> ${GITHUB_STEP_SUMMARY}
          OPERATOR_HELM_VERSION=$(helm get metadata rancher-${{ inputs.hosted_provider }}-operator -n cattle-system -o json | jq -r .version)
          echo "Installed rancher-${{ inputs.hosted_provider }}-operator chart version: $OPERATOR_HELM_VERSION" >> ${GITHUB_STEP_SUMMARY}
          if [ ${{ inputs.tests_to_run }} == "backup_restore" ]; then
            BR_OPERATOR_HELM_VERSION=$(helm get metadata rancher-backup -n cattle-resources-system -o json | jq -r .version)
            echo "Installed backup-restore operator chart version: $BR_OPERATOR_HELM_VERSION" >> ${GITHUB_STEP_SUMMARY}
          fi

  delete-runner:
    if: ${{ always() && inputs.destroy_runner == true }}
    needs: [create-runner, installation-and-e2e-tests]
    runs-on: ubuntu-latest
    steps:
      # actions/checkout MUST come before auth
      - name: Checkout
        uses: actions/checkout@v4
      - name: Authenticate to GCP
        uses: google-github-actions/auth@v2
        with:
          credentials_json: ${{ secrets.GOOGLE_APPLICATION_CREDENTIALS }}
      - name: Setup gcloud
        uses: google-github-actions/setup-gcloud@v2
      - name: Delete GCP secrets
        run: |
          gcloud --quiet secrets delete PAT_TOKEN_${{ needs.create-runner.outputs.uuid }}
          gcloud --quiet secrets delete GH_REPO_${{ needs.create-runner.outputs.uuid }}
      - name: Delete runner
        run: |
          gcloud --quiet compute instances delete ${{ needs.create-runner.outputs.runner }} \
            --delete-disks all \
            --zone ${{ env.GCP_RUNNER_ZONE }}
